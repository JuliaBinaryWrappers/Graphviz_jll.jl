# Autogenerated wrapper script for Graphviz_jll for i686-linux-musl-cxx03
export acyclic, bcomps, ccomps, circo, cluster, dijkstra, dot, dot2gxl, dot_builtins, edgepaint, fdp, gc, gml2gv, graphml2gv, gv2gml, gv2gxl, gvcolor, gvgen, gvmap, gvpack, gvpr, gxl2dot, gxl2gv, libcdt, libcgraph, libgvc, libgvpr, liblab_gamut, libpathplan, libxdot, mm2gv, neato, nop, osage, patchwork, prune, sccmap, sfdp, tred, twopi, unflatten

using Cairo_jll
using Expat_jll
using Pango_jll
JLLWrappers.@generate_wrapper_header("Graphviz")
JLLWrappers.@declare_library_product(libcdt, "libcdt.so.5")
JLLWrappers.@declare_library_product(libcgraph, "libcgraph.so.6")
JLLWrappers.@declare_library_product(libgvc, "libgvc.so.6")
JLLWrappers.@declare_library_product(libgvpr, "libgvpr.so.2")
JLLWrappers.@declare_library_product(liblab_gamut, "liblab_gamut.so.1")
JLLWrappers.@declare_library_product(libpathplan, "libpathplan.so.4")
JLLWrappers.@declare_library_product(libxdot, "libxdot.so.4")
JLLWrappers.@declare_executable_product(acyclic)
JLLWrappers.@declare_executable_product(bcomps)
JLLWrappers.@declare_executable_product(ccomps)
JLLWrappers.@declare_executable_product(circo)
JLLWrappers.@declare_executable_product(cluster)
JLLWrappers.@declare_executable_product(dijkstra)
JLLWrappers.@declare_executable_product(dot)
JLLWrappers.@declare_executable_product(dot2gxl)
JLLWrappers.@declare_executable_product(dot_builtins)
JLLWrappers.@declare_executable_product(edgepaint)
JLLWrappers.@declare_executable_product(fdp)
JLLWrappers.@declare_executable_product(gc)
JLLWrappers.@declare_executable_product(gml2gv)
JLLWrappers.@declare_executable_product(graphml2gv)
JLLWrappers.@declare_executable_product(gv2gml)
JLLWrappers.@declare_executable_product(gv2gxl)
JLLWrappers.@declare_executable_product(gvcolor)
JLLWrappers.@declare_executable_product(gvgen)
JLLWrappers.@declare_executable_product(gvmap)
JLLWrappers.@declare_executable_product(gvpack)
JLLWrappers.@declare_executable_product(gvpr)
JLLWrappers.@declare_executable_product(gxl2dot)
JLLWrappers.@declare_executable_product(gxl2gv)
JLLWrappers.@declare_executable_product(mm2gv)
JLLWrappers.@declare_executable_product(neato)
JLLWrappers.@declare_executable_product(nop)
JLLWrappers.@declare_executable_product(osage)
JLLWrappers.@declare_executable_product(patchwork)
JLLWrappers.@declare_executable_product(prune)
JLLWrappers.@declare_executable_product(sccmap)
JLLWrappers.@declare_executable_product(sfdp)
JLLWrappers.@declare_executable_product(tred)
JLLWrappers.@declare_executable_product(twopi)
JLLWrappers.@declare_executable_product(unflatten)
function __init__()
    JLLWrappers.@generate_init_header(Cairo_jll, Expat_jll, Pango_jll)
    JLLWrappers.@init_library_product(
        libcdt,
        "lib/libcdt.so",
        RTLD_LAZY | RTLD_DEEPBIND,
    )

    JLLWrappers.@init_library_product(
        libcgraph,
        "lib/libcgraph.so",
        RTLD_LAZY | RTLD_DEEPBIND,
    )

    JLLWrappers.@init_library_product(
        libgvc,
        "lib/libgvc.so",
        RTLD_LAZY | RTLD_DEEPBIND,
    )

    JLLWrappers.@init_library_product(
        libgvpr,
        "lib/libgvpr.so",
        RTLD_LAZY | RTLD_DEEPBIND,
    )

    JLLWrappers.@init_library_product(
        liblab_gamut,
        "lib/liblab_gamut.so",
        RTLD_LAZY | RTLD_DEEPBIND,
    )

    JLLWrappers.@init_library_product(
        libpathplan,
        "lib/libpathplan.so",
        RTLD_LAZY | RTLD_DEEPBIND,
    )

    JLLWrappers.@init_library_product(
        libxdot,
        "lib/libxdot.so",
        RTLD_LAZY | RTLD_DEEPBIND,
    )

    JLLWrappers.@init_executable_product(
        acyclic,
        "bin/acyclic",
    )

    JLLWrappers.@init_executable_product(
        bcomps,
        "bin/bcomps",
    )

    JLLWrappers.@init_executable_product(
        ccomps,
        "bin/ccomps",
    )

    JLLWrappers.@init_executable_product(
        circo,
        "bin/circo",
    )

    JLLWrappers.@init_executable_product(
        cluster,
        "bin/cluster",
    )

    JLLWrappers.@init_executable_product(
        dijkstra,
        "bin/dijkstra",
    )

    JLLWrappers.@init_executable_product(
        dot,
        "bin/dot",
    )

    JLLWrappers.@init_executable_product(
        dot2gxl,
        "bin/dot2gxl",
    )

    JLLWrappers.@init_executable_product(
        dot_builtins,
        "bin/dot_builtins",
    )

    JLLWrappers.@init_executable_product(
        edgepaint,
        "bin/edgepaint",
    )

    JLLWrappers.@init_executable_product(
        fdp,
        "bin/fdp",
    )

    JLLWrappers.@init_executable_product(
        gc,
        "bin/gc",
    )

    JLLWrappers.@init_executable_product(
        gml2gv,
        "bin/gml2gv",
    )

    JLLWrappers.@init_executable_product(
        graphml2gv,
        "bin/graphml2gv",
    )

    JLLWrappers.@init_executable_product(
        gv2gml,
        "bin/gv2gml",
    )

    JLLWrappers.@init_executable_product(
        gv2gxl,
        "bin/gv2gxl",
    )

    JLLWrappers.@init_executable_product(
        gvcolor,
        "bin/gvcolor",
    )

    JLLWrappers.@init_executable_product(
        gvgen,
        "bin/gvgen",
    )

    JLLWrappers.@init_executable_product(
        gvmap,
        "bin/gvmap",
    )

    JLLWrappers.@init_executable_product(
        gvpack,
        "bin/gvpack",
    )

    JLLWrappers.@init_executable_product(
        gvpr,
        "bin/gvpr",
    )

    JLLWrappers.@init_executable_product(
        gxl2dot,
        "bin/gxl2dot",
    )

    JLLWrappers.@init_executable_product(
        gxl2gv,
        "bin/gxl2gv",
    )

    JLLWrappers.@init_executable_product(
        mm2gv,
        "bin/mm2gv",
    )

    JLLWrappers.@init_executable_product(
        neato,
        "bin/neato",
    )

    JLLWrappers.@init_executable_product(
        nop,
        "bin/nop",
    )

    JLLWrappers.@init_executable_product(
        osage,
        "bin/osage",
    )

    JLLWrappers.@init_executable_product(
        patchwork,
        "bin/patchwork",
    )

    JLLWrappers.@init_executable_product(
        prune,
        "bin/prune",
    )

    JLLWrappers.@init_executable_product(
        sccmap,
        "bin/sccmap",
    )

    JLLWrappers.@init_executable_product(
        sfdp,
        "bin/sfdp",
    )

    JLLWrappers.@init_executable_product(
        tred,
        "bin/tred",
    )

    JLLWrappers.@init_executable_product(
        twopi,
        "bin/twopi",
    )

    JLLWrappers.@init_executable_product(
        unflatten,
        "bin/unflatten",
    )

    JLLWrappers.@generate_init_footer()
end  # __init__()
